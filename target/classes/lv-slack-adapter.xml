<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:slack="http://www.mulesoft.org/schema/mule/slack" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/slack http://www.mulesoft.org/schema/mule/slack/current/mule-slack.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:listener-config name="lv-slack-adapter-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="lv-slack-adapter-config" raml="lv-slack-adapter.raml" consoleEnabled="false" doc:name="Router"/>
    <http:request-config name="HTTP_Request_Configuration" protocol="HTTPS" host="api.dialogflow.com" basePath="/v1" port="443" doc:name="HTTP Request Configuration"/>
    <slack:token-config name="Slack__Token_Configuration" accessToken="&lt;&lt;SLACKTOKEN&gt;&gt;" doc:name="Slack: Token Configuration"/>
    <objectstore:config name="ObjectStore" partition="apiAiSessionId" entryTtl="600000" expirationInterval="10000" maxEntries="10000" persistent="true" doc:name="ObjectStore: Connector"/>
    <flow name="lv-slack-adapter-main">
        <http:listener config-ref="lv-slack-adapter-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="lv-slack-adapter-config" doc:name="APIkit Router"/>
        <exception-strategy ref="lv-slack-adapter-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="lv-slack-adapter-console">
        <http:listener config-ref="lv-slack-adapter-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="lv-slack-adapter-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="checkRequirements" processingStrategy="synchronous">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[&quot;*****************&quot; + payload]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Decipher Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	intent: payload.result.metadata.intentName,
	speech: payload.result.fulfillment.speech,
	incomplete: payload.result.actionIncomplete,
	action: payload.result.action
}]]></dw:set-payload>
            <dw:set-variable variableName="speech"><![CDATA[%dw 1.0
%output application/java
---
{
	speech: payload.result.fulfillment.speech
}]]></dw:set-variable>
            <dw:set-variable variableName="httpPayload"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <choice doc:name="Choice">
            <when expression="#[payload.action == &quot;hotelbook.hotelbook-yes&quot; &amp;&amp; payload.incomplete == false]">
                <logger message="RESERVATION COMPLETE" level="INFO" doc:name="All Data Gathered"/>
                <logger message="#[flowVars.httpPayload]" level="INFO" doc:name="Logger"/>
                <flow-ref name="endUserSession" doc:name="End Session"/>
            </when>
            <when expression="#[payload.action == &quot;hotelbook.hotelbook-no&quot; &amp;&amp; payload.incomplete == false]">
                <logger message="#[&quot;USER DOES NOT WANT TO ENTER FLIGHT INFO&quot;]" level="INFO" doc:name="Logger"/>
                <flow-ref name="endUserSession" doc:name="End Session"/>
            </when>
            <otherwise>
                <logger message="NO PATH TAKEN, KEEP CONVERSATION" level="INFO" doc:name="Keep Conversation Going"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="checkUserSession" processingStrategy="synchronous">
        <objectstore:contains config-ref="ObjectStore" key="#[flowVars.incomingMessage.user]" doc:name="ObjectStore"/>
        <choice doc:name="Choice">
            <when expression="#[payload == true]">
                <logger message="EXISTING SESSION" level="INFO" category="SESSION_INFO" doc:name="Existing Session Log"/>
                <objectstore:retrieve config-ref="ObjectStore" key="#[flowVars.incomingMessage.user]" doc:name="Retrieve Session Key"/>
                <set-variable variableName="sessionId" value="#[payload.toString()]" doc:name="Variable"/>
            </when>
            <otherwise>
                <logger message="CREATE NEW SESSION" level="INFO" category="SESSION_INFO" doc:name="Create Session Log"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-variable variableName="sessionId"><![CDATA[%dw 1.0
%output application/java
---
((1+random) * 100000) as :string {format: "#"}]]></dw:set-variable>
                </dw:transform-message>
                <objectstore:store config-ref="ObjectStore" key="#[flowVars.incomingMessage.user]" value-ref="#[flowVars.sessionId]" overwrite="true" doc:name="Create Session"/>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
    query: flowVars.incomingMessage.message,
    sessionId: flowVars.sessionId,
    lang: "en"
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="lv-slack-adapterFlow">
        <slack:retrieve-events config-ref="Slack__Token_Configuration" messages="true" directMessages="true" onlyNewMessages="true" ignoreSelfEvents="true" doc:name="Slack (Streaming)"/>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Convert to JSON">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
            <dw:set-variable variableName="intention"><![CDATA[%dw 1.0
%output application/java
---
({
  action:"AccountInfo",
  value: "hotel"
}
  ) when (lower (payload.text) contains "hotel") otherwise 
({
  action:"OrderInfo",
  value: "flight"
}
  ) when (lower (payload.text) contains "flight") otherwise {}
  
]]></dw:set-variable>
        </dw:transform-message>
        <logger message="Intention: #[flowVars.intention:java.lang.String]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Capture Incoming Slack Message">
            <dw:set-variable variableName="incomingMessage"><![CDATA[%dw 1.0
%output application/java
---
{
	channel: payload.channel,
	user: payload.user,
	message: payload.text
}]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="checkUserSession" doc:name="Check User Session"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/query" method="POST" doc:name="Check Intent">
            <http:request-builder>
                <http:query-param paramName="v" value="20170712"/>
                <http:header headerName="Authorization" value="&lt;&lt;NLPHotelToken&gt;&gt;"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <flow-ref name="checkRequirements" doc:name="NLP Processing"/>
        <dw:transform-message doc:name="Slack Response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.speech.speech]]></dw:set-payload>
        </dw:transform-message>
        <slack:post-message config-ref="Slack__Token_Configuration" channelId="DBBEQCMT3" message="#[payload]" doc:name="Slack" iconURL="https://drive.google.com/file/d/14hbfkEyc8gWhT7Iz61bAyw361Azqah2u/edit" username="Diamonds Reservation App"/>
    </flow>
        <flow name="endUserSession" processingStrategy="synchronous">
        <objectstore:remove config-ref="ObjectStore" key="#[flowVars.incomingMessage.user]" ignoreNotExists="true" doc:name="End Session"/>
        <logger message="END SESSION" level="INFO" doc:name="Log End Session"/>
    </flow>
    <apikit:mapping-exception-strategy name="lv-slack-adapter-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>

</mule>
